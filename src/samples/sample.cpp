/** The static sample list.
 *
 * This file is auto generated by audio_tool.py
 * 2025-05-05
 *
 * Do not modify.
 *
 * @file
 */

#include "sample.h"
#include <span>

using namespace rcSamples;

extern const uint8_t _binary_diesel_start_wav_start[];
extern const uint8_t _binary_diesel_start_wav_end[];
extern const uint8_t _binary_diesel0i_wav_start[];
extern const uint8_t _binary_diesel0i_wav_end[];
extern const uint8_t _binary_diesel2i_wav_start[];
extern const uint8_t _binary_diesel2i_wav_end[];
extern const uint8_t _binary_diesel0r_wav_start[];
extern const uint8_t _binary_diesel0r_wav_end[];
extern const uint8_t _binary_diesel9r_wav_start[];
extern const uint8_t _binary_diesel9r_wav_end[];
extern const uint8_t _binary_truck_horn_wav_start[];
extern const uint8_t _binary_truck_horn_wav_end[];
extern const uint8_t _binary_airbrake_wav_start[];
extern const uint8_t _binary_airbrake_wav_end[];
extern const uint8_t _binary_reversing_wav_start[];
extern const uint8_t _binary_reversing_wav_end[];
extern const uint8_t _binary_indicator_wav_start[];
extern const uint8_t _binary_indicator_wav_end[];
extern const uint8_t _binary_beetle_horn_wav_start[];
extern const uint8_t _binary_beetle_horn_wav_end[];
extern const uint8_t _binary_beetle_start_wav_start[];
extern const uint8_t _binary_beetle_start_wav_end[];
extern const uint8_t _binary_beetle1i_wav_start[];
extern const uint8_t _binary_beetle1i_wav_end[];
extern const uint8_t _binary_beetle9i_wav_start[];
extern const uint8_t _binary_beetle9i_wav_end[];
extern const uint8_t _binary_beetle1r_wav_start[];
extern const uint8_t _binary_beetle1r_wav_end[];
extern const uint8_t _binary_beetle9r_wav_start[];
extern const uint8_t _binary_beetle9r_wav_end[];
extern const uint8_t _binary_siren1_wav_start[];
extern const uint8_t _binary_siren1_wav_end[];
extern const uint8_t _binary_siren2_wav_start[];
extern const uint8_t _binary_siren2_wav_end[];
extern const uint8_t _binary_siren3_wav_start[];
extern const uint8_t _binary_siren3_wav_end[];
extern const uint8_t _binary_braking_wav_start[];
extern const uint8_t _binary_braking_wav_end[];
extern const uint8_t _binary_coupling_wav_start[];
extern const uint8_t _binary_coupling_wav_end[];
extern const uint8_t _binary_rattle_squeek_wav_start[];
extern const uint8_t _binary_rattle_squeek_wav_end[];
extern const uint8_t _binary_steam_wav_start[];
extern const uint8_t _binary_steam_wav_end[];
extern const uint8_t _binary_steam_whistle_wav_start[];
extern const uint8_t _binary_steam_whistle_wav_end[];
extern const uint8_t _binary_whistle_wav_start[];
extern const uint8_t _binary_whistle_wav_end[];
extern const uint8_t _binary_stroke_wav_start[];
extern const uint8_t _binary_stroke_wav_end[];
extern const uint8_t _binary_bell_wav_start[];
extern const uint8_t _binary_bell_wav_end[];
extern const uint8_t _binary_horn_wav_start[];
extern const uint8_t _binary_horn_wav_end[];
extern const uint8_t _binary_track_ratteling_wav_start[];
extern const uint8_t _binary_track_ratteling_wav_end[];
extern const uint8_t _binary_440_wav_start[];
extern const uint8_t _binary_440_wav_end[];
extern const uint8_t _binary_low_fuel_wav_start[];
extern const uint8_t _binary_low_fuel_wav_end[];
extern const uint8_t _binary_sendling_start_wav_start[];
extern const uint8_t _binary_sendling_start_wav_end[];
extern const uint8_t _binary_sendling_idle_wav_start[];
extern const uint8_t _binary_sendling_idle_wav_end[];
extern const uint8_t _binary_sendling_idle2_wav_start[];
extern const uint8_t _binary_sendling_idle2_wav_end[];
extern const uint8_t _binary_sendling_idle3_wav_start[];
extern const uint8_t _binary_sendling_idle3_wav_end[];
extern const uint8_t _binary_sendling_rev_wav_start[];
extern const uint8_t _binary_sendling_rev_wav_end[];
extern const uint8_t _binary_shot_wav_start[];
extern const uint8_t _binary_shot_wav_end[];
extern const uint8_t _binary_silence_wav_start[];
extern const uint8_t _binary_silence_wav_end[];


const SampleFile staticSamplesArray[]{
  SampleFile{.id = {'T', 'D', 'S'},
    .content = std::span{_binary_diesel_start_wav_start,
       static_cast<size_t>(_binary_diesel_start_wav_end - _binary_diesel_start_wav_start)}
  },
  SampleFile{.id = {'T', 'D', '1'},
    .content = std::span{_binary_diesel0i_wav_start,
       static_cast<size_t>(_binary_diesel0i_wav_end - _binary_diesel0i_wav_start)}
  },
  SampleFile{.id = {'T', 'D', '2'},
    .content = std::span{_binary_diesel2i_wav_start,
       static_cast<size_t>(_binary_diesel2i_wav_end - _binary_diesel2i_wav_start)}
  },
  SampleFile{.id = {'T', 'D', '3'},
    .content = std::span{_binary_diesel0r_wav_start,
       static_cast<size_t>(_binary_diesel0r_wav_end - _binary_diesel0r_wav_start)}
  },
  SampleFile{.id = {'T', 'D', '4'},
    .content = std::span{_binary_diesel9r_wav_start,
       static_cast<size_t>(_binary_diesel9r_wav_end - _binary_diesel9r_wav_start)}
  },
  SampleFile{.id = {'T', 'H', 'O'},
    .content = std::span{_binary_truck_horn_wav_start,
       static_cast<size_t>(_binary_truck_horn_wav_end - _binary_truck_horn_wav_start)}
  },
  SampleFile{.id = {'T', 'A', 'B'},
    .content = std::span{_binary_airbrake_wav_start,
       static_cast<size_t>(_binary_airbrake_wav_end - _binary_airbrake_wav_start)}
  },
  SampleFile{.id = {'T', 'R', 'E'},
    .content = std::span{_binary_reversing_wav_start,
       static_cast<size_t>(_binary_reversing_wav_end - _binary_reversing_wav_start)}
  },
  SampleFile{.id = {'C', 'I', 'N'},
    .content = std::span{_binary_indicator_wav_start,
       static_cast<size_t>(_binary_indicator_wav_end - _binary_indicator_wav_start)}
  },
  SampleFile{.id = {'C', 'H', 'O'},
    .content = std::span{_binary_beetle_horn_wav_start,
       static_cast<size_t>(_binary_beetle_horn_wav_end - _binary_beetle_horn_wav_start)}
  },
  SampleFile{.id = {'C', 'V', '1'},
    .content = std::span{_binary_beetle_start_wav_start,
       static_cast<size_t>(_binary_beetle_start_wav_end - _binary_beetle_start_wav_start)}
  },
  SampleFile{.id = {'C', 'V', '2'},
    .content = std::span{_binary_beetle1i_wav_start,
       static_cast<size_t>(_binary_beetle1i_wav_end - _binary_beetle1i_wav_start)}
  },
  SampleFile{.id = {'C', 'V', '3'},
    .content = std::span{_binary_beetle9i_wav_start,
       static_cast<size_t>(_binary_beetle9i_wav_end - _binary_beetle9i_wav_start)}
  },
  SampleFile{.id = {'C', 'V', '4'},
    .content = std::span{_binary_beetle1r_wav_start,
       static_cast<size_t>(_binary_beetle1r_wav_end - _binary_beetle1r_wav_start)}
  },
  SampleFile{.id = {'C', 'V', '5'},
    .content = std::span{_binary_beetle9r_wav_start,
       static_cast<size_t>(_binary_beetle9r_wav_end - _binary_beetle9r_wav_start)}
  },
  SampleFile{.id = {'S', 'i', '1'},
    .content = std::span{_binary_siren1_wav_start,
       static_cast<size_t>(_binary_siren1_wav_end - _binary_siren1_wav_start)}
  },
  SampleFile{.id = {'S', 'i', '2'},
    .content = std::span{_binary_siren2_wav_start,
       static_cast<size_t>(_binary_siren2_wav_end - _binary_siren2_wav_start)}
  },
  SampleFile{.id = {'S', 'i', '3'},
    .content = std::span{_binary_siren3_wav_start,
       static_cast<size_t>(_binary_siren3_wav_end - _binary_siren3_wav_start)}
  },
  SampleFile{.id = {'T', 'B', 'R'},
    .content = std::span{_binary_braking_wav_start,
       static_cast<size_t>(_binary_braking_wav_end - _binary_braking_wav_start)}
  },
  SampleFile{.id = {'T', 'C', 'O'},
    .content = std::span{_binary_coupling_wav_start,
       static_cast<size_t>(_binary_coupling_wav_end - _binary_coupling_wav_start)}
  },
  SampleFile{.id = {'T', 'R', 'A'},
    .content = std::span{_binary_rattle_squeek_wav_start,
       static_cast<size_t>(_binary_rattle_squeek_wav_end - _binary_rattle_squeek_wav_start)}
  },
  SampleFile{.id = {'T', 'S', 'T'},
    .content = std::span{_binary_steam_wav_start,
       static_cast<size_t>(_binary_steam_wav_end - _binary_steam_wav_start)}
  },
  SampleFile{.id = {'T', 'S', 'w'},
    .content = std::span{_binary_steam_whistle_wav_start,
       static_cast<size_t>(_binary_steam_whistle_wav_end - _binary_steam_whistle_wav_start)}
  },
  SampleFile{.id = {'T', 'S', 'W'},
    .content = std::span{_binary_whistle_wav_start,
       static_cast<size_t>(_binary_whistle_wav_end - _binary_whistle_wav_start)}
  },
  SampleFile{.id = {'T', 'S', 'R'},
    .content = std::span{_binary_stroke_wav_start,
       static_cast<size_t>(_binary_stroke_wav_end - _binary_stroke_wav_start)}
  },
  SampleFile{.id = {'S', 'B', 'L'},
    .content = std::span{_binary_bell_wav_start,
       static_cast<size_t>(_binary_bell_wav_end - _binary_bell_wav_start)}
  },
  SampleFile{.id = {'S', 'H', 'O'},
    .content = std::span{_binary_horn_wav_start,
       static_cast<size_t>(_binary_horn_wav_end - _binary_horn_wav_start)}
  },
  SampleFile{.id = {'O', 'T', 'R'},
    .content = std::span{_binary_track_ratteling_wav_start,
       static_cast<size_t>(_binary_track_ratteling_wav_end - _binary_track_ratteling_wav_start)}
  },
  SampleFile{.id = {'O', '4', '4'},
    .content = std::span{_binary_440_wav_start,
       static_cast<size_t>(_binary_440_wav_end - _binary_440_wav_start)}
  },
  SampleFile{.id = {'O', 'L', 'F'},
    .content = std::span{_binary_low_fuel_wav_start,
       static_cast<size_t>(_binary_low_fuel_wav_end - _binary_low_fuel_wav_start)}
  },
  SampleFile{.id = {'O', 'S', '1'},
    .content = std::span{_binary_sendling_start_wav_start,
       static_cast<size_t>(_binary_sendling_start_wav_end - _binary_sendling_start_wav_start)}
  },
  SampleFile{.id = {'O', 'S', '2'},
    .content = std::span{_binary_sendling_idle_wav_start,
       static_cast<size_t>(_binary_sendling_idle_wav_end - _binary_sendling_idle_wav_start)}
  },
  SampleFile{.id = {'O', 'S', '3'},
    .content = std::span{_binary_sendling_idle2_wav_start,
       static_cast<size_t>(_binary_sendling_idle2_wav_end - _binary_sendling_idle2_wav_start)}
  },
  SampleFile{.id = {'O', 'S', '4'},
    .content = std::span{_binary_sendling_idle3_wav_start,
       static_cast<size_t>(_binary_sendling_idle3_wav_end - _binary_sendling_idle3_wav_start)}
  },
  SampleFile{.id = {'O', 'S', '5'},
    .content = std::span{_binary_sendling_rev_wav_start,
       static_cast<size_t>(_binary_sendling_rev_wav_end - _binary_sendling_rev_wav_start)}
  },
  SampleFile{.id = {'O', 'S', 'H'},
    .content = std::span{_binary_shot_wav_start,
       static_cast<size_t>(_binary_shot_wav_end - _binary_shot_wav_start)}
  },
  SampleFile{.id = {'O', 's', 'i'},
    .content = std::span{_binary_silence_wav_start,
       static_cast<size_t>(_binary_silence_wav_end - _binary_silence_wav_start)}
  }
};

std::span<const rcSamples::SampleFile> staticSamplesSpan(staticSamplesArray);

const std::span<const rcSamples::SampleFile>& rcSamples::getStaticSamples() {
  return staticSamplesSpan;
}


