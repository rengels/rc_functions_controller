#
# CMake file for the rc_engine library for the rc functions controller.
#
# The library contains engine related stuff.
#

set(engine_srcs

    engine_simple.cpp
    engine_gear.cpp  # an engine connected to gear and wheels (and trailer)
    engine_brake.cpp
    engine_reverse.cpp  # an engine with rear gears

    power_curves.cpp  # generated by python script below

    engine_idle.cpp  # For idle power management in the engine.
    engine_speed.cpp
    )

find_package (Python3 COMPONENTS Interpreter)

# creates serialization.cpp with a script.
# note: we create it in the source dir and check it in, so that not everybody
#   has to have python and cmake running.
if (${Python3_FOUND})
    add_custom_command (
        OUTPUT
            ${CMAKE_CURRENT_SOURCE_DIR}/power_curves.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/power_curves.h
        COMMAND
            ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/convert_power_curves.py
            --cpp ${CMAKE_CURRENT_SOURCE_DIR}/power_curves.cpp
            --header ${CMAKE_CURRENT_SOURCE_DIR}/power_curves.h
        DEPENDS
            ${CMAKE_CURRENT_SOURCE_DIR}/convert_power_curves.py
            ${CMAKE_CURRENT_SOURCE_DIR}/../config/power_curves.svg
    )
    add_custom_target (generate_power_curves_h DEPENDS
            ${CMAKE_CURRENT_SOURCE_DIR}/power_curves.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/power_curves.h
    )
endif ()


if (${ESP_PLATFORM})  # idf build system
    # no subdirectory
    idf_component_register(
        SRCS ${engine_srcs}
        INCLUDE_DIRS "."
        REQUIRES signals proc)
    add_dependencies (${COMPONENT_LIB} generate_power_curves_h)
    target_compile_definitions (${COMPONENT_LIB}
        PRIVATE
            ARDUINO
    )

else () # build with "normal" cmake

    add_library (rc_engine
        ${engine_srcs}
    )
    target_include_directories (rc_engine
        PUBLIC
            .
    )
    target_link_libraries (rc_engine
        PUBLIC
            rc_signals
            rc_proc
    )

endif ()
